#include <iostream>

 class TreeNode
{

public:
int data;
  
TreeNode * left;
  
TreeNode * right;
  
 
TreeNode (int val)
  {
    
data = val;
    
left = nullptr;
    
right = nullptr;

} 
};


 
class BST
{

private:
TreeNode * root;
  
 
TreeNode * insert (TreeNode * node, int val)
  {
    
if (node == nullptr)
      {
	
return new TreeNode (val);
      
}
    
 
if (val < node->data)
      {
	
node->left = insert (node->left, val);
      
}
    else if (val > node->data)
      {
	
node->right = insert (node->right, val);
      
}
    
 
return node;
  
}
  
 
TreeNode * search (TreeNode * node, int val)
  {
    
if (node == nullptr || node->data == val)
      {
	
return node;
      
}
    
 
if (val < node->data)
      {
	
return search (node->left, val);
      
}
    else
      {
	
return search (node->right, val);
      
}
  
}
  
 
void inorderTraversal (TreeNode * node)
  {
    
if (node == nullptr)
      {
	
return;
      
}
    
 
inorderTraversal (node->left);
    
std::cout << node->data << " ";
    
inorderTraversal (node->right);
  
}

 
public:
BST ()
  {
    
root = nullptr;
  
}
  
 
void insert (int val)
  {
    
root = insert (root, val);
  
} 
 
bool search (int val)
  {
    
TreeNode * result = search (root, val);
    
return (result != nullptr);
  
}
  
 
void inorderTraversal ()
  {
    
inorderTraversal (root);
    
std::cout << std::endl;

} 
};


 
int
main ()
{
  
BST bst;
  
 
bst.insert (50);
  
bst.insert (30);
  
bst.insert (70);
  
bst.insert (20);
  
bst.insert (40);
  
bst.insert (60);
  
bst.insert (80);
  
 
std::cout << "Inorder Traversal: ";
  
bst.inorderTraversal ();
  
 
int searchValue = 40;
  
if (bst.search (searchValue))
    {
      
std::cout << searchValue << " found in the BST." << std::endl;
    
}
  else
    {
      
std::cout << searchValue << " not found in the BST." << std::endl;
    
}
  
 
return 0;

}


